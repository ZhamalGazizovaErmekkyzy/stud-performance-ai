import streamlit as st
import pandas as pd
import io
import chardet
import matplotlib.pyplot as plt
import seaborn as sns
from openpyxl import Workbook

# üéØ –ë–∞—Å—Ç—ã —Ç–∞“õ—ã—Ä—ã–ø
st.title("üìö –û“õ—É—à—ã–ª–∞—Ä–¥—ã“£ –æ“õ—É –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω —Ç–∞–ª–¥–∞—É")

# üìÇ –§–∞–π–ª –∂“Ø–∫—Ç–µ—É
uploaded_file = st.file_uploader("–§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ“£—ñ–∑", type=["csv", "xlsx", "xls", "json", "txt"])

# üì• –§–∞–π–ª–¥—ã –æ“õ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def load_file(uploaded_file):
    if uploaded_file is not None:
        file_type = uploaded_file.name.split('.')[-1]

        if file_type == 'csv':
            raw_data = uploaded_file.read()
            detected_encoding = chardet.detect(raw_data)['encoding']
            df = pd.read_csv(io.BytesIO(raw_data), encoding=detected_encoding, low_memory=False)
        elif file_type in ['xls', 'xlsx']:
            df = pd.read_excel(uploaded_file, engine="openpyxl")
        elif file_type == 'json':
            df = pd.read_json(uploaded_file)
        elif file_type == 'txt':
            df = pd.read_csv(uploaded_file, delimiter="\t", encoding="utf-8", low_memory=False)
        else:
            st.error("‚ùå “ö–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–π—Ç—ñ–Ω —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—ã!")
            return None
        return df
    return None

# üìä –û—Ä—Ç–∞—à–∞ –±–∞–ª–ª–¥—ã –µ—Å–µ–ø—Ç–µ—É –∂”ô–Ω–µ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä –±–µ—Ä—É
def analyze_performance(data):
    numeric_data = data.iloc[:, 1:].apply(pd.to_numeric, errors='coerce')
    data['–û—Ä—Ç–∞—à–∞ –±–∞–ª–ª'] = numeric_data.mean(axis=1, skipna=True)
    recommendations = []
    
    for score in data['–û—Ä—Ç–∞—à–∞ –±–∞–ª–ª']:
        if pd.isna(score):
            rec = "‚ùì –ú”ô–ª—ñ–º–µ—Ç –∂–æ“õ"
        elif score >= 9:
            rec = "üåü –ö–µ—Ä–µ–º–µ—Ç –Ω”ô—Ç–∏–∂–µ! –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä–∞ –±–µ—Ä—ñ“£—ñ–∑!"
        elif score >= 7:
            rec = "üëç –ñ–∞“õ—Å—ã! –ë—ñ—Ä–∞“õ –æ–¥–∞–Ω –¥–∞ –∂–∞“õ—Å–∞—Ä—Ç—É“ì–∞ –±–æ–ª–∞–¥—ã."
        elif score >= 5:
            rec = "üìö “ö–æ—Å—ã–º—à–∞ –¥–∞–π—ã–Ω–¥–∞–ª—É “õ–∞–∂–µ—Ç."
        else:
            rec = "üöÄ –¢—å—é—Ç–æ—Ä–ª—ã“õ –Ω–µ–º–µ—Å–µ “õ–æ—Å—ã–º—à–∞ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—Å—Ç—ã—Ä—ã“£—ã–∑."
        recommendations.append(rec)
    
    data['“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä'] = recommendations
    return data

# üì• Excel –∂“Ø–∫—Ç–µ—É
def download_excel(df):
    output = io.BytesIO()
    workbook = Workbook()
    sheet = workbook.active
    for r_idx, row in enumerate(df.itertuples(index=False), start=1):
        for c_idx, value in enumerate(row, start=1):
            sheet.cell(row=r_idx, column=c_idx, value=value)
    workbook.save(output)
    return output.getvalue()

# üèÅ –ï–≥–µ—Ä —Ñ–∞–π–ª –∂“Ø–∫—Ç–µ–ª—Å–µ, –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ ”©“£–¥–µ—É
if uploaded_file:
    df = load_file(uploaded_file)
    if df is not None:
        result = analyze_performance(df)

        # üìä –ö–µ—Å—Ç–µ —Ç“Ø—Ä—ñ–Ω–¥–µ –∫”©—Ä—Å–µ—Ç—É
        st.write("üìä **–û“õ—É—à—ã–ª–∞—Ä–¥—ã“£ –æ“õ—É –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω —Ç–∞–ª–¥–∞—É:**")
        st.dataframe(result)

        # üìà –î”©“£–≥–µ–ª–µ–∫ –¥–∏–∞–≥—Ä–∞–º–º–∞ (Pie Chart)
        st.subheader("üìä –û—Ä—Ç–∞—à–∞ –±–∞–ª–ª –±–æ–π—ã–Ω—à–∞ “Ø–ª–µ—Å –¥–∏–∞–≥—Ä–∞–º–º–∞—Å—ã")
        fig, ax = plt.subplots()
        colors = sns.color_palette("pastel")  # –¢“Ø—Ä–ª—ñ —Ç“Ø—Å—Ç—ñ –ø–∞–ª–∏—Ç—Ä–∞
        score_counts = result['–û—Ä—Ç–∞—à–∞ –±–∞–ª–ª'].round(1).value_counts().sort_index()
        
        ax.pie(score_counts, labels=score_counts.index, autopct='%1.1f%%', colors=colors, startangle=140)
        ax.set_title("–û—Ä—Ç–∞—à–∞ –±–∞–ª–ª “Ø–ª–µ—Å—ñ")
        st.pyplot(fig)

        # üì• Excel –∂“Ø–∫—Ç–µ—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
        excel_data = download_excel(result)
        st.download_button(label="üì• Excel —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂“Ø–∫—Ç–µ—É",
                           data=excel_data,
                           file_name="recommendations.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
